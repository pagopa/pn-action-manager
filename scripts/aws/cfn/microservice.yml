AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create experimental environments without crash official development environment'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ActionEnqueuerKinesisBatchSize:
    Type: Number
    Description: 'Batch size for Kinesis to Lambda action router'
    Default: 10

  ActionEnqueuerManagerLambdaName:
    Type: String

  ActionEnqueuerManagerDLQAlarmARN:
    Type: String
    Description: 'DLQ ARN for ActionEnqueuer Lambda'

  ActionEnqueuerManagerDLQARN:
    Type: String
    Description: 'DLQ ARN for ActionEnqueuer Lambda'

  CdcPnFutureActionArn:
    Type: String
    Description: 'Kinesis stream for pn-futureAction'

  # OpenApi Bucket params
  MicroserviceBucketName:
    Type: String
    Default: ''
    Description: 'Name of the bucket where the microservice files are copied during deploy'

  ActionQueueMap:
    Type: String
    Description: 'Define relation from actionType to sqs queue name'

  QueueUrlMap:
    Type: String
    Description: 'Define relation from queue name to sqs queue url'

  ActionTimeoutErrorDLQURL:
    Type: String
    Description: 'DLQ URL for ActionRouter lambda'

  ScheduledActionsQueueARN:
    Type: String
    Description: 'Send and pull ready-to-do actions th this queue'

  ScheduledValidationActionsQueueARN:
    Type: String
    Description: 'Send and pull ready-to-do actions th this queue'

  ActionTimeoutErrorDLQARN:
    Type: String
    Description: 'DLQ ARN for ActionRouter lambda'

  ActionTimeoutErrorDLQAlarmARN:
    Type: String
    Description: 'DLQ ARN for ActionRouter lambda'

  FutureActionDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing'

  ActionRemoverManagerLambdaName:
    Type: String

  LastPollForFutureActionDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing'

  ActionRouterManagerKinesisBatchSize:
    Type: Number
    Description: "Batch size for kinesis to lambda action router"

  CdcPnActionArn:
    Type: String
    Description: 'Kinesis stream for pn-action'

  ActionRouterManagerDLQARN:
    Type: String
    Description: 'DLQ ARN for ActionRouter lambda'

  ActionRouterManagerAlarmARN:
    Type: String
    Description: 'DLQ Alarm ARN for ActionRouter lambda'

  ActionRouterManagerLambdaName:
    Type: String

  FutureActionTtlExtraDays:
    Default: 365
    Type: Number
    Description: TTL in days days to add to the futureAction start date.

  ActionDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing'

  FutureActionDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing'

  # Instance parameters
  # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
  # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
  # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
  # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
  # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
  CpuValue:
    Type: Number
    Default: 1024
    Description: Fargate virtual CPU quantity 1024 equals one vCPU

  # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
  # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
  # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
  # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
  # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
  MemoryAmount:
    Type: String
    Default: 2GB
    Description: memory amount reserved to the task pod.
    AllowedValues: [ 2GB, 4GB, 6GB, 8GB ]

  # Heath Check parameters
  HealthCheckInterval:
    Description: Seconds between two health check
    Type: Number
    Default: 60

  HealthCheckTimeout:
    Description: health check timeout seconds
    Type: Number
    Default: 5

  HealthyThresholdCount:
    Description: |
      The number of consecutive health checks successes required before considering 
      an unhealthy target healthy.
    Type: Number
    Default: 5

  UnhealthyThresholdCount:
    Description: |
      The number of consecutive health check failures required before considering a target unhealthy.
    Type: Number
    Default: 2

  AutoscalingThreshold:
    Default: 70
    Type: String

  # Autoscaling parameters
  AutoscalingCheckPeriod:
    Default: 60
    Type: Number
    Description: minimum autoscaling number of tasks\

  MinTasksNumber:
    Default: 1
    Type: Number
    Description: minimum autoscaling number of tasks

  MaxTasksNumber:
    Default: 6
    Type: Number
    Description: maximum autoscaling number of tasks

  AutoscalingDataPointN:
    Default: 1
    Type: Number
    Description: activate when N datapoint on M

  AutoscalingDataPointM:
    Default: 1
    Type: Number
    Description: activate when N datapoint on M

  AlarmSNSTopicArn:
    Type: String
    Description: 'ARN of alarm topic'

  # EFS parameters
  FargateEFSFileSystemID:
    Type: String
    Description: "EFS Filesystem"

  MountEfs:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  # Logging parameters
  WireTapLogActivation:
    Type: String
    Default: false
    Description: Activation of wire logs
    AllowedValues:
      - true
      - false

  ApplicativeEnvFileChecksum:
    Type: String
    Default: ''
    Description: 'Applicative environment variable file checksum'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: CommaDelimitedList
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  AlbSecurityGroup:
    Type: String
    Description: 'Application load balancer security group'

  # Log group parameters
  EcsLogGroup:
    Type: String
    Description: 'Ecs log group name'

  LogAlarmStrategy:
    Type: String
    Default: 'FATAL'


Resources:
  # PN-TemplateBeMs microservice
  ActionManagerMsMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-action-manager'
        CpuValue: !Ref CpuValue
        MemoryAmount: !Ref MemoryAmount
        HealthCheckTimeout: !Ref HealthCheckTimeout
        HealthCheckInterval: !Ref HealthCheckInterval
        HealthyThresholdCount: !Ref HealthyThresholdCount
        UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
        AutoscalingStrategy: REST-API
        AutoscalingThreshold: !Ref AutoscalingThreshold
        AutoscalingCheckPeriod: !Ref AutoscalingCheckPeriod
        MinTasksNumber: !Ref MinTasksNumber
        MaxTasksNumber: !Ref MaxTasksNumber
        AutoscalingDataPointN: !Ref AutoscalingDataPointN
        AutoscalingDataPointM: !Ref AutoscalingDataPointM
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        EfsFilesystem: !Ref FargateEFSFileSystemID
        MountEfs: !Ref MountEfs
        WireTapLogActivation: !Ref WireTapLogActivation
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ApplicativeEnvFileChecksum: !Ref ApplicativeEnvFileChecksum
        MappedPaths: 'action-manager-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Join [ ',', !Ref SubnetsIds ]
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        AlbSecurityGroup: !Ref AlbSecurityGroup
        EcsLogGroup: !Ref EcsLogGroup
        LogAlarmStrategyV1: !Ref LogAlarmStrategy

  ActionManagerMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-action-manager"
        DynamoDBTableNames: !Join
          - ','
          - - !Ref ActionDynamoTableName
            - !Ref FutureActionDynamoTableName
        AlarmArns: !Join
          - ','
          - - !Ref ActionRouterManagerDLQARN
            - !Ref ActionEnqueuerManagerDLQAlarmARN
            - !Ref ActionTimeoutErrorDLQAlarmARN
            - !Ref ActionRouterManagerAlarmARN
        QueueArns: !Join
          - ','
          - - !Ref ScheduledActionsQueueARN
            - !Ref ScheduledValidationActionsQueueARN

  # CDC To ActionEnqueuer
  ActionEnqueuerManagerKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Ref ActionEnqueuerKinesisBatchSize
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcPnFutureActionArn
      FunctionName: !GetAtt ActionEnqueuerManagerLambda.Outputs.FunctionName
      DestinationConfig:
        OnFailure:
          Destination: !Ref ActionEnqueuerManagerDLQARN
      FunctionResponseTypes:
        - ReportBatchItemFailures
      FilterCriteria:
        Filters:
          - Pattern: '{"data": {"eventName": ["REMOVE"]}}'
      MaximumBatchingWindowInSeconds: 300
      MaximumRetryAttempts: 5
      StartingPosition: TRIM_HORIZON

  ActionEnqueuerManagerLambdaLibrariesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs18.x
      Content:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/action-enqueuer_libs.zip"
      Description: NodeJs Libs layer
      LayerName: actionEnqueuer-libs-layer

  ActionEnqueuerManagerLambda:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda.yaml"
      Parameters:
        FunctionName: !Ref ActionEnqueuerManagerLambdaName
        Handler: "index.handler"
        FunctionBucketName: !Ref MicroserviceBucketName
        FunctionBucketKey: !Sub "${MicroserviceBucketBaseKey}/functions_zip/action-enqueuer_code.zip"
        MemorySize: 512
        Timeout: 10
        Runtime: nodejs18.x
        TracingConfigMode: "Active"
        RoleArn: !GetAtt ActionEnqueuerManagerLambdaRole.Arn
        Layer1: !Ref ActionEnqueuerManagerLambdaLibrariesLayer
        EnvVariables: !Sub [
          "ACTION_QUEUE_MAP=${actionQueueMap}###QUEUE_URL_MAP=${QueueUrlMap}###TIMEOUT_DLQ=${ActionTimeoutErrorDLQURL}",
          {
            actionQueueMap: !Ref ActionQueueMap,
            QueueUrlMap: !Ref QueueUrlMap,
            ActionTimeoutErrorDLQURL: !Ref ActionTimeoutErrorDLQURL
          }
        ]

  # Lambda function role
  ActionEnqueuerManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-actionEnqueuerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  ActionEnqueuerManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-ActionEnqueuerLambdaPolicy
      Roles:
        - !Ref ActionEnqueuerManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcPnFutureActionArn
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !Ref ScheduledActionsQueueARN
              - !Ref ScheduledValidationActionsQueueARN
              - !Ref ActionEnqueuerManagerDLQARN
              - !Ref ActionTimeoutErrorDLQARN
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Ref FutureActionDynamoTableArn

  ActionRemoverManagerLambdaLibrariesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs18.x
      Content:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/future-action-remover_libs.zip"
      Description: NodeJs Libs layer
      LayerName: actionRemover-libs-layer

  # Future Action Remover
  ActionRemoverManagerLambda:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda.yaml"
      Parameters:
        FunctionName: !Ref ActionRemoverManagerLambdaName
        Handler: "index.handler"
        FunctionBucketName: !Ref MicroserviceBucketName
        FunctionBucketKey: !Sub "${MicroserviceBucketBaseKey}/functions_zip/future-action-remover_code.zip"
        MemorySize: 512
        Timeout: 10
        Runtime: nodejs18.x
        TracingConfigMode: "Active"
        RoleArn: !GetAtt ActionRemoverManagerLambdaRole.Arn
        Layer1: !Ref ActionRemoverManagerLambdaLibrariesLayer
        EnvVariables: "LAST_WORKED_KEY=2"


  # Lambda function role
  ActionRemoverManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-actionRemoverLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  ActionRemoverManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-ActionRemoverLambdaPolicy
      Roles:
        - !Ref ActionRemoverManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:Query"
            Resource:
              - !Ref FutureActionDynamoTableArn
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
            Resource:
              - !Ref LastPollForFutureActionDynamoTableArn

  # Action Remover scheduler BEGIN
  ActionRemoverManagerSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdScheduleExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ActionRemoverManagerLambda.Outputs.FunctionArn
  ActionRemoverManagerScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: "Schedule Action Remover every minute"
      FlexibleTimeWindow:
        Mode: "OFF"
      Name: "ActionRemoverShedule"
      ScheduleExpression: "rate(1 minutes)"
      State: ENABLED
      Target:
        Arn: !GetAtt ActionRemoverManagerLambda.Outputs.FunctionArn
        RoleArn: !GetAtt ActionRemoverManagerSchedulerRole.Arn
  # Action Remover scheduler END

  # CDC to Lambda action router
  ActionRouterKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Ref ActionRouterManagerKinesisBatchSize
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcPnActionArn
      FunctionName: !GetAtt ActionRouterLambda.Outputs.FunctionName
      DestinationConfig:
        OnFailure:
          Destination: !Ref ActionRouterManagerDLQARN
      FunctionResponseTypes:
        - ReportBatchItemFailures
      FilterCriteria:
        { "Filters": [ { "Pattern": '{"data": {"eventName": ["INSERT"]}}' } ] }
      MaximumBatchingWindowInSeconds: 300
      MaximumRetryAttempts: 5
      StartingPosition: TRIM_HORIZON


  ActionRouterLambdaLibrariesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs18.x
      Content:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/pn-action-router_libs.zip"
      Description: NodeJs Libs layer
      LayerName: actionRouterLambda-libs-layer

  ActionRouterLambda:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda.yaml"
      Parameters:
        FunctionName: !Ref ActionRouterManagerLambdaName
        Handler: "index.handler"
        FunctionBucketName: !Ref MicroserviceBucketName
        FunctionBucketKey: !Sub "${MicroserviceBucketBaseKey}/functions_zip/pn-action-router_code.zip"
        MemorySize: 512
        Timeout: 10
        Runtime: nodejs18.x
        TracingConfigMode: "Active"
        RoleArn: !GetAtt ActionRouterLambdaRole.Arn
        Layer1: !Ref ActionRouterLambdaLibrariesLayer
        EnvVariables:
          !Sub [
            "ACTION_QUEUE_MAP=${actionQueueMap}###QUEUE_URL_MAP=${QueueUrlMap}###FUTURE_ACTION_TTL_EXTRA_DAYS=${FutureActionTtlExtraDays}###ACTION_TIMEOUT_ERROR_DLQ_URL=${ActionTimeoutErrorDLQURL}",
            {
              actionQueueMap: !Ref ActionQueueMap,
              QueueUrlMap: !Ref QueueUrlMap,
              FutureActionTtlExtraDays: !Ref FutureActionTtlExtraDays,
              ActionTimeoutErrorDLQURL: !Ref ActionTimeoutErrorDLQURL
            },
          ]

  # Lambda function role
  ActionRouterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-actionRouterLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  ActionRouterLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-ActionRouterLambdaPolicy
      Roles:
        - !Ref ActionRouterLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcPnActionArn
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !Ref ScheduledActionsQueueARN
              - !Ref ScheduledValidationActionsQueueARN
              - !Ref ActionRouterManagerDLQARN
              - !Ref ActionTimeoutErrorDLQARN
          - Effect: Allow
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:BatchWriteItem"
            Resource:
              - !Ref FutureActionDynamoTableArn